{"version":3,"file":"main.699dda7ec4ff7eb7c2fc.bundle.js","sources":["webpack:///./.storybook/config.js","webpack:///./.storybook/theme.js","webpack:///./src/__stories__/JsonSchemaViewer.tsx","webpack:///./src/__stories__/index.ts","webpack:///./src/components/Additional.tsx","webpack:///./src/components/Divider.tsx","webpack:///./src/components/Enum.tsx","webpack:///./src/components/JsonSchemaViewer.tsx","webpack:///./src/components/MaskedSchema.tsx","webpack:///./src/components/SchemaRow.tsx","webpack:///./src/components/SchemaTree.tsx","webpack:///./src/components/TopBar.tsx","webpack:///./src/components/Type.tsx","webpack:///./src/components/Types.tsx","webpack:///./src/components/Validations.tsx","webpack:///./src/components/common/ErrorMessage.tsx","webpack:///./src/components/common/MutedText.tsx","webpack:///./src/hooks/index.ts","webpack:///./src/hooks/useMetadata.ts","webpack:///./src/theme.ts","webpack:///./src/themes/dark.ts","webpack:///./src/themes/light.ts","webpack:///./src/utils/assignId.ts","webpack:///./src/utils/formatRef.ts","webpack:///./src/utils/getAnnotations.ts","webpack:///./src/utils/getMetadata.ts","webpack:///./src/utils/getValidations.ts","webpack:///./src/utils/index.ts","webpack:///./src/utils/isCombiner.ts","webpack:///./src/utils/isRef.ts","webpack:///./src/utils/isSchemaViewerEmpty.ts","webpack:///./src/utils/lookupRef.ts","webpack:///./src/utils/pathToString.ts","webpack:///./src/utils/renderSchema.ts","webpack:///./src/utils/walk.ts"],"sourcesContent":["import '@stoplight/storybook-config/config';\n","import { createThemedModule } from '@stoplight/ui-kit';\nimport { dark } from '../src/themes/dark';\nimport { light } from '../src/themes/light';\n\nconst { useTheme, ThemeProvider } = createThemedModule();\n\nexport { useTheme, ThemeProvider };\n\nexport const themes = ['dark', 'light'];\n\nexport const zones = {\n  'tree-list': ({ base }) => base === 'dark'  ? dark['tree-list'] : light['tree-list'],\n  'json-schema-viewer': ({ base }) => base === 'dark'  ? dark['json-schema-viewer'] : light['json-schema-viewer'],\n};\n","import * as React from 'react';\n\nimport { State, Store } from '@sambego/storybook-state';\nimport { action } from '@storybook/addon-actions';\nimport { boolean, number, object, text, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\nimport { JsonSchemaViewer } from '../components/JsonSchemaViewer';\n\nimport * as schema from '../__fixtures__/default-schema.json';\nimport * as schemaWithRefs from '../__fixtures__/ref/original.json';\nimport * as dereferencedSchema from '../__fixtures__/ref/resolved.json';\nimport * as stressSchema from '../__fixtures__/stress-schema.json';\n\nstoriesOf('JsonSchemaViewer', module)\n  .addDecorator(withKnobs)\n  .add('default', () => (\n    <JsonSchemaViewer\n      name={text('name', 'my schema')}\n      schema={schema}\n      defaultExpandedDepth={number('defaultExpandedDepth', 2)}\n      expanded={boolean('expanded', false)}\n      hideTopBar={boolean('hideTopBar', false)}\n    />\n  ))\n  .add('with dereferenced schema', () => {\n    const store = new Store<{ selected: string[] }>({\n      selected: [],\n    });\n\n    return (\n      <State store={store}>\n        <JsonSchemaViewer\n          name={text('name', 'name')}\n          schema={schemaWithRefs}\n          dereferencedSchema={dereferencedSchema}\n          defaultExpandedDepth={number('defaultExpandedDepth', 2)}\n          onSelect={(path: string) => {\n            const selected = [...store.get('selected')];\n            const index = selected.indexOf(path);\n            if (index !== -1) {\n              selected.splice(index, 1);\n            } else {\n              selected.push(path);\n            }\n\n            store.set({ selected });\n            action('onSelect')(path);\n          }}\n          selected={store.get('selected')}\n          expanded={boolean('expanded', true)}\n          hideTopBar={boolean('hideTopBar', false)}\n        />\n      </State>\n    );\n  })\n  .add('custom schema', () => (\n    <JsonSchemaViewer\n      name={text('name', 'my schema')}\n      schema={object('schema', {})}\n      expanded={boolean('expanded', true)}\n      hideTopBar={boolean('hideTopBar', false)}\n    />\n  ))\n  .add('stress-test schema', () => (\n    <JsonSchemaViewer\n      name={text('name', 'my stress schema')}\n      schema={stressSchema}\n      defaultExpandedDepth={number('defaultExpandedDepth', 2)}\n      expanded={boolean('expanded', false)}\n      hideTopBar={boolean('hideTopBar', false)}\n    />\n  ));\n","// NOTE: The ordering of these imports determines the ordering in Storybook\nimport './JsonSchemaViewer';\n","import { safeStringify } from '@stoplight/json';\nimport { Box, Flex, Popup, Tooltip } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { ITreeNodeMeta } from '../types';\n\nexport const Additional: React.FunctionComponent<Pick<ITreeNodeMeta, 'additional'>> = ({ additional }) => {\n  const trigger = (\n    <Box fontSize=\"0.75rem\" ml={6}>\n      accepts additional\n    </Box>\n  );\n\n  if (typeof additional === 'boolean') {\n    return trigger;\n  }\n\n  const content = React.useMemo(() => safeStringify(additional, undefined, 2), [additional]);\n\n  return (\n    <Popup\n      posX=\"left\"\n      posY=\"center\"\n      padding={2}\n      renderTrigger={() => trigger}\n      renderContent={() => (\n        <Tooltip posX=\"left\" posY=\"center\">\n          <Flex flexFlow=\"column nowrap\">{content}</Flex>\n        </Tooltip>\n      )}\n    />\n  );\n};\n","import { Box, Flex, IFlex } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IJsonSchemaViewerTheme, useTheme } from '../theme';\nimport { MutedText } from './common/MutedText';\n\nexport const Divider: React.FunctionComponent<IFlex> = ({ children, ...props }) => {\n  const theme = useTheme() as IJsonSchemaViewerTheme;\n\n  return (\n    <Flex alignItems=\"center\" position=\"absolute\" top=\"-16px\" left=\"0\" height=\"10px\" {...props}>\n      <MutedText fontSize=\".8rem\" textTransform=\"uppercase\" fontWeight={700} pr={7}>\n        {children}\n      </MutedText>\n      <Box backgroundColor={theme.divider.bg} height=\"2px\" flex=\"1 1 0%\" />\n    </Flex>\n  );\n};\n","import { Box, IBox } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IBaseNode } from '../types';\n\nexport interface IEnum extends IBox {\n  value: IBaseNode['enum'];\n}\n\nexport const Enum: React.FunctionComponent<IEnum> = ({ value, ...props }) => {\n  if (!value) return null;\n\n  return <Box as=\"span\" {...props}>{`enum[${value.join(',')}]`}</Box>;\n};\n","import { TreeStore } from '@stoplight/tree-list';\nimport { Omit } from '@stoplight/types';\nimport { runInAction } from 'mobx';\nimport * as React from 'react';\nimport { ThemeZone } from '../theme';\nimport { isSchemaViewerEmpty, renderSchema } from '../utils';\nimport { ErrorMessage } from './common/ErrorMessage';\nimport { MutedText } from './common/MutedText';\nimport { ISchemaTree, SchemaTree } from './SchemaTree';\n\nexport interface IJsonSchemaViewer extends Omit<ISchemaTree, 'emptyText' | 'treeStore'> {\n  emptyText?: string;\n  defaultExpandedDepth?: number;\n}\n\nexport interface IJsonSchemaViewerState {\n  error: null | string;\n}\n\nexport class JsonSchemaViewer extends React.PureComponent<IJsonSchemaViewer, IJsonSchemaViewerState> {\n  public state = {\n    error: null,\n  };\n\n  protected treeStore: TreeStore;\n\n  constructor(props: IJsonSchemaViewer) {\n    super(props);\n\n    this.treeStore = new TreeStore({\n      defaultExpandedDepth: this.expandedDepth,\n      nodes: Array.from(renderSchema(props.schema, props.dereferencedSchema)),\n    });\n  }\n\n  // there is no error hook yet, see https://reactjs.org/docs/hooks-faq.html#how-do-lifecycle-methods-correspond-to-hooks\n  public static getDerivedStateFromError(error: Error): { error: IJsonSchemaViewerState['error'] } {\n    return { error: `Error rendering schema. ${error.message}` };\n  }\n\n  protected get expandedDepth(): number {\n    if (this.props.expanded) {\n      return 2 ** 31 - 3; // tree-list kind of equivalent of expanded: all\n    }\n\n    if (this.props.defaultExpandedDepth !== undefined) {\n      return this.props.defaultExpandedDepth;\n    }\n\n    return 1;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IJsonSchemaViewer>) {\n    if (this.treeStore.defaultExpandedDepth !== this.expandedDepth) {\n      runInAction(() => {\n        this.treeStore.defaultExpandedDepth = this.expandedDepth;\n      });\n    }\n\n    if (prevProps.schema !== this.props.schema || prevProps.dereferencedSchema !== this.props.dereferencedSchema) {\n      runInAction(() => {\n        this.treeStore.nodes = Array.from(renderSchema(this.props.schema, this.props.dereferencedSchema));\n      });\n    }\n  }\n\n  public render() {\n    const {\n      props: { emptyText = 'No schema defined', name, schema, schemas, expanded, defaultExpandedDepth, ...props },\n      state: { error },\n    } = this;\n\n    if (error) {\n      return (\n        <ThemeZone name=\"json-schema-viewer\">\n          <ErrorMessage>{error}</ErrorMessage>\n        </ThemeZone>\n      );\n    }\n\n    // an empty array or object is still a valid response, schema is ONLY really empty when a combiner type has no information\n    if (isSchemaViewerEmpty(schema)) {\n      return (\n        <ThemeZone name=\"json-schema-viewer\">\n          <MutedText>{emptyText}</MutedText>\n        </ThemeZone>\n      );\n    }\n\n    return (\n      <ThemeZone name=\"json-schema-viewer\">\n        <SchemaTree expanded={expanded} name={name} schema={schema} treeStore={this.treeStore} {...props} />\n      </ThemeZone>\n    );\n  }\n}\n","import { Dialog } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IJsonSchemaViewer, JsonSchemaViewer } from './JsonSchemaViewer';\n\nexport interface IMaskedSchema extends IJsonSchemaViewer {\n  onClose(): void;\n}\n\nexport const MaskedSchema: React.FunctionComponent<IMaskedSchema> = ({ onClose, ...props }) => {\n  return (\n    <Dialog show onClickOutside={onClose} width=\"50vh\" height=\"50vh\" position=\"relative\">\n      <JsonSchemaViewer {...props} canSelect />\n    </Dialog>\n  );\n};\n","import { Omit } from '@stoplight/types';\nimport { Box, Button, Checkbox, Flex, IBox } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IMasking, SchemaNodeWithMeta } from '../types';\nimport { formatRef, isCombiner, isRef, pathToString } from '../utils';\nimport { Additional } from './Additional';\nimport { MutedText } from './common/MutedText';\nimport { Divider } from './Divider';\nimport { Enum } from './Enum';\nimport { Type } from './Type';\nimport { Types } from './Types';\nimport { Validations } from './Validations';\n\nexport interface ISchemaRow extends Omit<IBox, 'onClick'>, IMasking {\n  node: SchemaNodeWithMeta;\n  onMaskEdit(node: SchemaNodeWithMeta): void;\n}\n\nexport const SchemaRow: React.FunctionComponent<ISchemaRow> = ({\n  node,\n  canSelect,\n  onSelect,\n  onMaskEdit,\n  selected,\n  ...props\n}) => {\n  const handleEditMask = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>(\n    e => {\n      e.stopPropagation();\n      onMaskEdit(node);\n    },\n    [onMaskEdit]\n  );\n\n  const handleChange = React.useCallback(\n    () => {\n      if (onSelect !== undefined) {\n        onSelect(pathToString(node.path));\n      }\n    },\n    [onSelect]\n  );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      fontSize=\"0.8rem\"\n      lineHeight=\"1rem\"\n      position=\"relative\"\n      width=\"calc(100% - 30px)\"\n      ml=\"-15px\"\n      css={{ userSelect: 'text' }}\n      {...props}\n    >\n      {node.showDivider && (\n        <Divider ml=\"-24px\" width={`calc(100% + 24px)`}>\n          or\n        </Divider>\n      )}\n\n      <Box overflow=\"hidden\" whiteSpace=\"nowrap\" textOverflow=\"ellipsis\">\n        <Flex alignItems=\"baseline\">\n          {'name' in node && node.name !== undefined ? (\n            <Box as=\"span\" mr={11}>\n              {node.name}\n            </Box>\n          ) : null}\n\n          {isRef(node) ? (\n            <Type type=\"$ref\">{`[${node.$ref}]`}</Type>\n          ) : (\n            <Types type={isCombiner(node) ? node.combiner : node.type} subtype={node.subtype} />\n          )}\n\n          {'pattern' in node && node.pattern ? (\n            <MutedText as=\"span\" fontSize=\"0.6rem\" position=\"relative\" top=\"-10px\" pl={3}>\n              pattern\n            </MutedText>\n          ) : null}\n\n          {node.inheritedFrom ? (\n            <>\n              <MutedText as=\"span\" ml={6}>{`{${formatRef(node.inheritedFrom)}}`}</MutedText>\n              {onMaskEdit !== undefined && (\n                <Button\n                  border=\"0 none\"\n                  css={{\n                    '&, &:hover': {\n                      backgroundColor: 'transparent',\n                    },\n                  }}\n                  px={6}\n                  py={0}\n                  fontSize=\"0.8rem\"\n                  onClick={handleEditMask}\n                >\n                  (edit mask)\n                </Button>\n              )}\n            </>\n          ) : null}\n        </Flex>\n\n        {'annotations' in node && node.annotations.description ? (\n          <MutedText as=\"span\" pt={1} fontSize=\".8rem\" title={node.annotations.description}>\n            {node.annotations.description}\n          </MutedText>\n        ) : null}\n      </Box>\n\n      <Flex alignItems=\"center\" textAlign=\"right\" fontSize=\".75rem\" ml=\"auto\" pl={14}>\n        {canSelect ? (\n          <Checkbox onChange={handleChange} checked={selected && selected.includes(pathToString(node.path))} ml={12} />\n        ) : (\n          <>\n            {'enum' in node && <Enum value={node.enum} />}\n\n            {'additional' in node && <Additional additional={node.additional} />}\n\n            {'validations' in node && node.validations !== undefined && <Validations validations={node.validations} />}\n\n            {node.required && (\n              <Box as=\"span\" fontWeight={700} ml={6}>\n                required\n              </Box>\n            )}\n          </>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n","import { TreeList, TreeListMouseEventHandler, TreeStore } from '@stoplight/tree-list';\nimport { Omit } from '@stoplight/types';\nimport { Box, IBox, ThemeZone } from '@stoplight/ui-kit';\nimport { JSONSchema4 } from 'json-schema';\nimport _isEmpty = require('lodash/isEmpty');\nimport * as React from 'react';\nimport { useMetadata } from '../hooks';\nimport { useTheme } from '../theme';\nimport { IMasking, SchemaNodeWithMeta } from '../types';\nimport { lookupRef } from '../utils';\nimport { IJsonSchemaViewer } from './JsonSchemaViewer';\nimport { MaskedSchema } from './MaskedSchema';\nimport { ISchemaRow, SchemaRow } from './SchemaRow';\nimport { TopBar } from './TopBar';\n\nconst canDrag = () => false;\n\nexport interface ISchemaTree extends Omit<IBox, 'onSelect'>, IMasking {\n  name?: string;\n  dereferencedSchema?: JSONSchema4;\n  schema: JSONSchema4;\n  expanded?: boolean;\n  hideTopBar?: boolean;\n  treeStore: TreeStore;\n}\n\nexport const SchemaTree: React.FunctionComponent<ISchemaTree> = props => {\n  const {\n    emptyText,\n    expanded = false,\n    schema,\n    dereferencedSchema,\n    hideTopBar,\n    selected,\n    canSelect,\n    onSelect,\n    name,\n    treeStore,\n    ...rest\n  } = props;\n\n  const theme = useTheme() as IJsonSchemaViewer;\n  const [maskedSchema, setMaskedSchema] = React.useState<JSONSchema4 | null>(null);\n\n  const metadata = useMetadata(schema);\n\n  const handleMaskEdit = React.useCallback<ISchemaRow['onMaskEdit']>(\n    node => {\n      setMaskedSchema(lookupRef(node.path, dereferencedSchema));\n    },\n    [dereferencedSchema]\n  );\n\n  const handleNodeClick = React.useCallback<TreeListMouseEventHandler>(\n    (e, node) => {\n      treeStore.toggleExpand(node);\n    },\n    [treeStore]\n  );\n\n  const handleMaskedSchemaClose = React.useCallback(() => {\n    setMaskedSchema(null);\n  }, []);\n\n  const shouldRenderTopBar = !hideTopBar && (name || !_isEmpty(metadata));\n\n  const itemData = {\n    onSelect,\n    onMaskEdit: handleMaskEdit,\n    selected,\n    canSelect,\n  };\n\n  return (\n    <Box backgroundColor={theme.canvas.bg} color={theme.canvas.fg} {...rest}>\n      {maskedSchema && (\n        <MaskedSchema onClose={handleMaskedSchemaClose} onSelect={onSelect} selected={selected} schema={maskedSchema} />\n      )}\n      {shouldRenderTopBar && <TopBar name={name} metadata={metadata} />}\n      <ThemeZone name=\"tree-list\">\n        <TreeList\n          top={shouldRenderTopBar ? '40px' : 0}\n          rowHeight={40}\n          canDrag={canDrag}\n          store={treeStore}\n          onNodeClick={handleNodeClick}\n          rowRenderer={node => <SchemaRow node={node.metadata as SchemaNodeWithMeta} {...itemData} />}\n        />\n      </ThemeZone>\n    </Box>\n  );\n};\n","import { Box, Flex } from '@stoplight/ui-kit';\nimport { JSONSchema4 } from 'json-schema';\nimport * as React from 'react';\nimport { JSONSchema4Metadata } from '../types';\nimport { MutedText } from './common/MutedText';\n\nexport interface ITopBar {\n  metadata: Pick<JSONSchema4, JSONSchema4Metadata>;\n  name?: string;\n}\n\nexport const TopBar: React.FunctionComponent<ITopBar> = ({ metadata, name }) => {\n  return (\n    <Flex alignItems=\"center\" px={12} height=\"40px\" fontSize=\"0.9rem\">\n      {name && (\n        <Box>\n          <MutedText as=\"span\">name:</MutedText>\n          {` ${name}`}\n        </Box>\n      )}\n      <Box ml=\"auto\">\n        {Object.entries(metadata).map(([prop, val]) => (\n          <>\n            <MutedText pl={8} as=\"span\">\n              {prop}:\n            </MutedText>\n            {` ${val}`}\n          </>\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n","import { Box, IBoxCSS } from '@stoplight/ui-kit';\nimport { JSONSchema4TypeName } from 'json-schema';\nimport * as React from 'react';\nimport { IJsonSchemaViewerTheme, useTheme } from '../theme';\nimport { JSONSchema4CombinerName } from '../types';\n\nexport const Type: React.FunctionComponent<IType> = ({ type, subtype, children }) => {\n  const theme = useTheme() as IJsonSchemaViewerTheme;\n  const css = rowStyles(theme, { type });\n\n  return (\n    <Box as=\"span\" css={css}>\n      {type === 'array' && subtype && subtype !== 'array' ? `array[${subtype}]` : type}\n      {children}\n    </Box>\n  );\n};\n\nexport interface IType {\n  type: JSONSchema4TypeName | JSONSchema4CombinerName | '$ref';\n  subtype?: JSONSchema4TypeName | JSONSchema4TypeName[];\n}\n\nexport const rowStyles = (theme: IJsonSchemaViewerTheme, { type }: IType): IBoxCSS => {\n  return type !== undefined && type in theme.types && { color: theme.types[type] };\n};\n","import { JSONSchema4TypeName } from 'json-schema';\nimport * as React from 'react';\nimport { JSONSchema4CombinerName } from '../types';\nimport { MutedText } from './common/MutedText';\nimport { Type } from './Type';\n\ninterface ITypes {\n  type?: JSONSchema4TypeName | JSONSchema4TypeName[] | JSONSchema4CombinerName;\n  subtype?: JSONSchema4TypeName | JSONSchema4TypeName[];\n}\n\nexport const Types: React.FunctionComponent<ITypes> = ({ type, subtype }) => {\n  if (!type) return null;\n\n  if (!Array.isArray(type)) {\n    return <Type type={type} subtype={subtype} />;\n  }\n\n  return (\n    <div>\n      {type.map((name, i, { length }) => (\n        <>\n          <Type type={name} subtype={subtype} />\n          {i < length - 1 && (\n            <MutedText as=\"span\" key={`${i}-sep`}>\n              {' or '}\n            </MutedText>\n          )}\n        </>\n      ))}\n    </div>\n  );\n};\n","import { safeStringify } from '@stoplight/json';\nimport { Box, Flex, Popup, Tooltip } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IBaseNode } from '../types';\nimport { MutedText } from './common/MutedText';\n\nexport const Validations: React.FunctionComponent<Pick<IBaseNode, 'validations'>> = ({ validations }) => {\n  const content = React.useMemo(\n    () =>\n      Object.entries(validations).map(([name, value]) => {\n        if (typeof value === 'object') {\n          value = safeStringify(value, undefined, 2);\n        }\n\n        return (\n          <Box as=\"span\" py={2} key={name}>\n            <MutedText as=\"b\">{name}:</MutedText> {String(value)}\n          </Box>\n        );\n      }),\n    [validations]\n  );\n\n  if (content.length === 0) return null;\n\n  return (\n    <Popup\n      posX=\"left\"\n      posY=\"center\"\n      padding={2}\n      renderTrigger={() => (\n        <Box fontSize=\"0.75rem\" ml={6}>\n          {content.length} validations\n        </Box>\n      )}\n      renderContent={() => (\n        <Tooltip posX=\"left\" posY=\"center\" fontSize=\"0.75rem\">\n          <Flex flexFlow=\"column nowrap\">{content}</Flex>\n        </Tooltip>\n      )}\n    />\n  );\n};\n","import { Box, IBox } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IJsonSchemaViewerTheme, useTheme } from '../../theme';\n\nexport const ErrorMessage: React.FunctionComponent<IBox> = props => {\n  const { children, ...rest } = props;\n  const theme = useTheme() as IJsonSchemaViewerTheme;\n  const css = errorMessageStyles(theme);\n\n  return (\n    <Box as=\"p\" p={11} css={css} {...rest}>\n      {children}\n    </Box>\n  );\n};\n\nexport const errorMessageStyles = (theme: IJsonSchemaViewerTheme) => {\n  return {\n    color: theme.canvas.error,\n  };\n};\n","import { Box, IBox } from '@stoplight/ui-kit';\nimport * as React from 'react';\nimport { IJsonSchemaViewerTheme, useTheme } from '../../theme';\n\nexport const MutedText: React.FunctionComponent<IBox> = props => {\n  const { children, ...rest } = props;\n  const theme = useTheme() as IJsonSchemaViewerTheme;\n\n  const css = mutedTextStyles(theme);\n\n  return (\n    <Box css={css} {...rest}>\n      {children}\n    </Box>\n  );\n};\n\nexport const mutedTextStyles = (theme: IJsonSchemaViewerTheme) => {\n  return {\n    color: theme.canvas.muted,\n  };\n};\n","export * from './useMetadata';\n","import { JSONSchema4 } from 'json-schema';\nimport { useMemo } from 'react';\nimport { getMetadata } from '../utils/getMetadata';\n\nexport const useMetadata = (schema: JSONSchema4) => {\n  return useMemo(() => getMetadata(schema), [schema]);\n};\n","import { ITreeListTheme } from '@stoplight/tree-list';\nimport { createThemedModule, ICustomTheme } from '@stoplight/ui-kit';\n\nexport type themeZones = 'json-schema-viewer' | 'tree-list';\nexport type themeTypes = IJsonSchemaViewerTheme | ITreeListTheme;\n\nexport const { useTheme, ThemeZone, ThemeProvider } = createThemedModule<themeZones, themeTypes>();\n\nexport interface IJsonSchemaViewerTheme extends ICustomTheme {\n  canvas: {\n    bg: string;\n    fg: string;\n    error: string;\n    muted: string;\n  };\n\n  types: {\n    array: string;\n    object: string;\n    allOf: string;\n    oneOf: string;\n    anyOf: string;\n    null: string;\n    integer: string;\n    number: string;\n    boolean: string;\n    binary: string;\n    string: string;\n    $ref: string;\n  };\n\n  divider: {\n    bg: string;\n  };\n}\n","import { ThemeZones } from '@stoplight/ui-kit';\nimport { themeTypes, themeZones } from '../theme';\n\nexport const dark: ThemeZones<themeZones, themeTypes> = {\n  'tree-list': {\n    base: 'dark',\n\n    canvas: {\n      invalid: 'red',\n    },\n\n    node: {\n      hoverBg: '#333',\n      hoverFg: '#fff',\n      evenBg: '#232222',\n    },\n  },\n\n  'json-schema-viewer': {\n    base: 'dark',\n\n    canvas: {\n      bg: '#111',\n      fg: '#fff',\n      error: 'red',\n      muted: 'rgba(255, 255, 255, 0.6)',\n    },\n\n    divider: {\n      bg: '#bababa',\n    },\n\n    types: {\n      object: '#83c1ff',\n      array: '#7dff75',\n      allOf: '#b89826',\n      oneOf: '#b89826',\n      anyOf: '#b89826',\n      null: '#ff7f50',\n      integer: '#e03b36',\n      number: '#e03b36',\n      boolean: '#ff69b4',\n      binary: '#8ccda3',\n      string: '#19c5a0',\n      $ref: '#a359e2',\n    },\n  },\n};\n","import { ThemeZones } from '@stoplight/ui-kit';\nimport { themeTypes, themeZones } from '../theme';\n\nexport const light: ThemeZones<themeZones, themeTypes> = {\n  'tree-list': {\n    base: 'light',\n\n    canvas: {\n      invalid: 'red',\n    },\n\n    node: {\n      hoverBg: '#e9e9e9',\n      hoverFg: '#111',\n      evenBg: '#f3f3f3',\n    },\n  },\n\n  'json-schema-viewer': {\n    base: 'light',\n\n    canvas: {\n      bg: '#fff',\n      fg: '#111',\n      error: 'red',\n      muted: 'rgba(0, 0, 0, 0.5)',\n    },\n\n    divider: {\n      bg: '#dae1e7',\n    },\n\n    types: {\n      object: '#00f',\n      array: '#008000',\n      allOf: '#B8860B',\n      oneOf: '#B8860B',\n      anyOf: '#B8860B',\n      null: '#ff7f50',\n      integer: '#a52a2a',\n      number: '#a52a2a',\n      boolean: '#ff69b4',\n      binary: '#66cdaa',\n      string: '#008080',\n      $ref: '#8a2be2',\n    },\n  },\n};\n","export const idStore = new WeakMap<object, string>();\n\nexport const assignId = (node: object): string => {\n  let id = idStore.get(node);\n\n  if (id === undefined) {\n    id = Math.random().toString(36);\n    idStore.set(node, id);\n  }\n\n  return id;\n};\n","export const formatRef = (ref: string) => ref.slice(ref.lastIndexOf('/') + 1);\n","import { JSONSchema4 } from 'json-schema';\nimport _pick = require('lodash/pick');\nimport { JSONSchema4Annotations } from '../types';\n\nconst ANNOTATIONS: JSONSchema4Annotations[] = ['title', 'description', 'default', 'examples'];\n\nexport function getAnnotations(node: JSONSchema4) {\n  return _pick(node, ANNOTATIONS);\n}\n","import { JSONSchema4 } from 'json-schema';\nimport _pick = require('lodash/pick');\nimport { JSONSchema4Metadata } from '../types';\n\nconst METADATA: JSONSchema4Metadata[] = ['id', '$schema'];\n\nexport function getMetadata(node: JSONSchema4): Pick<JSONSchema4, JSONSchema4Metadata> {\n  return _pick(node, METADATA);\n}\n","import { Dictionary } from '@stoplight/types';\nimport { JSONSchema4, JSONSchema4TypeName } from 'json-schema';\nimport _flatMap = require('lodash/flatMap');\nimport _pick = require('lodash/pick');\n\nexport const COMMON_VALIDATION_TYPES = [\n  'enum', // https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1\n  'format', // https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-7\n];\n\nconst VALIDATION_TYPES = {\n  string: ['minLength', 'maxLength', 'pattern'],\n  number: ['multipleOf', 'minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum'],\n  object: ['additionalProperties', 'minProperties', 'maxProperties'],\n  array: ['additionalItems', 'minItems', 'maxItems', 'uniqueItems'],\n};\n\nfunction getTypeValidations(type: JSONSchema4TypeName | JSONSchema4TypeName[]): string[] {\n  if (Array.isArray(type)) {\n    return _flatMap<JSONSchema4TypeName, string>(type, getTypeValidations);\n  }\n\n  return VALIDATION_TYPES[type] || [];\n}\n\nexport const getValidations = (node: JSONSchema4): Dictionary<unknown> => {\n  const extraValidations = node.type && getTypeValidations(node.type);\n  return {\n    ..._pick(node, COMMON_VALIDATION_TYPES),\n    ...(extraValidations && _pick(node, extraValidations)),\n  };\n};\n","export * from './assignId';\nexport * from './formatRef';\nexport * from './getAnnotations';\nexport * from './getMetadata';\nexport * from './getValidations';\nexport * from './isCombiner';\nexport * from './isRef';\nexport * from './isSchemaViewerEmpty';\nexport * from './lookupRef';\nexport * from './pathToString';\nexport * from './renderSchema';\nexport * from './walk';\n","import { ICombinerNode, SchemaNode } from '../types';\n\nexport const isCombiner = (node: SchemaNode): node is ICombinerNode => 'combiner' in node;\n","import { IRefNode, SchemaNode } from '../types';\n\nexport const isRef = (node: SchemaNode): node is IRefNode => '$ref' in node;\n","import { ISchema } from '@stoplight/types';\nimport get = require('lodash/get');\nimport isEmpty = require('lodash/isEmpty');\n\nconst combinerTypes = ['allOf', 'oneOf', 'anyOf'];\n\nexport const isSchemaViewerEmpty = (schema: ISchema) => {\n  const objectKeys = Object.keys(schema);\n\n  if (objectKeys.length === 1 && combinerTypes.includes(objectKeys[0])) {\n    return isEmpty(get(schema, objectKeys[0], []));\n  }\n\n  return false;\n};\n","import { JsonPath } from '@stoplight/types';\nimport { JSONSchema4 } from 'json-schema';\nimport _get = require('lodash/get');\n\nexport const lookupRef = (path: JsonPath, dereferencedSchema?: JSONSchema4): JSONSchema4 | null => {\n  if (dereferencedSchema === undefined) {\n    return null;\n  }\n\n  return _get(dereferencedSchema, path, null);\n};\n","import { JsonPath } from '@stoplight/types';\n\nexport const pathToString = (path: JsonPath) => path.join('.');\n","import { JSONSchema4 } from 'json-schema';\nimport _isEmpty = require('lodash/isEmpty');\nimport { IArrayNode, IObjectNode, ITreeNodeMeta, SchemaKind, SchemaTreeListNode } from '../types';\nimport { isCombiner } from './isCombiner';\nimport { isRef } from './isRef';\nimport { lookupRef } from './lookupRef';\nimport { walk } from './walk';\n\ntype Walker = (\n  schema: JSONSchema4,\n  dereferencedSchema: JSONSchema4 | undefined,\n  level?: number,\n  meta?: ITreeNodeMeta\n) => IterableIterator<SchemaTreeListNode>;\n\nconst getProperties: Walker = function*(schema, dereferencedSchema, level = 0, meta) {\n  if (schema.properties !== undefined) {\n    const { path } = meta!;\n    for (const [prop, property] of Object.entries(schema.properties)) {\n      yield* renderSchema(property, dereferencedSchema, level + 1, {\n        name: prop,\n        required: Array.isArray(schema.required) && schema.required.includes(prop),\n        path: [...path, prop],\n      });\n    }\n  }\n};\n\nconst getPatternProperties: Walker = function*(schema, dereferencedSchema, level = 0, meta) {\n  if (schema.patternProperties !== undefined) {\n    const { path } = meta!;\n    for (const [prop, property] of Object.entries(schema.patternProperties)) {\n      yield* renderSchema(property, dereferencedSchema, level + 1, {\n        name: prop,\n        path: [...path, prop],\n        pattern: true,\n      });\n    }\n  }\n};\n\nexport const renderSchema: Walker = function*(schema, dereferencedSchema, level = 0, meta = { path: [] }) {\n  const { path } = meta;\n\n  for (const node of walk(schema)) {\n    const baseNode: SchemaTreeListNode = {\n      id: node.id,\n      level,\n      name: '',\n      metadata: {\n        ...node,\n        ...meta,\n        ...(schema.items !== undefined && !Array.isArray(schema.items) && { subtype: schema.items.type }),\n        path,\n      },\n    };\n\n    if (isRef(node)) {\n      const resolved = lookupRef(path, dereferencedSchema);\n      if (resolved) {\n        yield* renderSchema(resolved, dereferencedSchema, level, {\n          ...meta,\n          inheritedFrom: node.$ref,\n        });\n      } else {\n        yield {\n          ...baseNode,\n          metadata: {\n            ...baseNode.metadata,\n            $ref: node.$ref,\n          },\n        } as SchemaTreeListNode;\n      }\n    } else if (isCombiner(node)) {\n      yield {\n        ...baseNode,\n        canHaveChildren: true,\n      };\n\n      if (node.properties !== undefined) {\n        const isConditionalCombiner = node.combiner === 'anyOf' || node.combiner === 'oneOf';\n        for (const [i, property] of node.properties.entries()) {\n          yield* renderSchema(property, dereferencedSchema, level + 1, {\n            showDivider: isConditionalCombiner && i !== 0,\n            path: [...path, 'properties', i],\n          });\n        }\n      }\n    } else if (node.type === SchemaKind.Array) {\n      yield {\n        ...baseNode,\n        ...('items' in node &&\n          !_isEmpty(node.items) &&\n          !('subtype' in baseNode.metadata!) && { canHaveChildren: true }),\n        metadata: {\n          ...baseNode.metadata,\n          // https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.1.2\n          ...(!('subtype' in baseNode) &&\n            (node as IArrayNode).additionalItems && { additional: (node as IArrayNode).additionalItems }),\n        },\n      } as SchemaTreeListNode;\n\n      if (Array.isArray(schema.items)) {\n        for (const [i, property] of schema.items.entries()) {\n          yield* renderSchema(property, dereferencedSchema, level + 1, {\n            path: [...path, 'items', i],\n          });\n        }\n      } else if (meta.subtype === 'object' && schema.items) {\n        yield* getProperties(schema.items, dereferencedSchema, level + 1, {\n          ...meta,\n          path: [...path, 'items'],\n        });\n      } else if (meta.subtype === 'array' && schema.items) {\n        yield* renderSchema(schema.items, dereferencedSchema, level + 1, {\n          path,\n        });\n      }\n    } else if ('properties' in node) {\n      // special case :P, it's\n      yield {\n        ...baseNode,\n        ...('properties' in node && !_isEmpty(node.properties) && { canHaveChildren: true }),\n        metadata: {\n          ...baseNode.metadata,\n          ...((node as IObjectNode).additionalProperties && {\n            additional: (node as IObjectNode).additionalProperties,\n          }),\n        },\n      } as SchemaTreeListNode;\n\n      yield* getProperties(schema, dereferencedSchema, level, {\n        path: [...path, 'properties'],\n      });\n\n      yield* getPatternProperties(schema, dereferencedSchema, level, {\n        path: [...path, 'patternProperties'],\n      });\n    } else {\n      yield baseNode;\n    }\n  }\n};\n","import { JSONSchema4 } from 'json-schema';\nimport {\n  IArrayNode,\n  IBaseNode,\n  ICombinerNode,\n  IObjectNode,\n  IRefNode,\n  JSONSchema4CombinerName,\n  SchemaKind,\n  SchemaNode,\n} from '../types';\nimport { assignId } from './assignId';\nimport { getAnnotations } from './getAnnotations';\nimport { getValidations } from './getValidations';\n\nconst getCombiner = (node: JSONSchema4): JSONSchema4CombinerName | void => {\n  if ('allOf' in node) return 'allOf';\n  if ('anyOf' in node) return 'anyOf';\n  if ('oneOf' in node) return 'oneOf';\n};\n\nfunction assignNodeSpecificFields(base: IBaseNode, node: JSONSchema4) {\n  switch (node.type) {\n    case SchemaKind.Array:\n      (base as IArrayNode).items = node.array;\n      (base as IArrayNode).additionalItems = node.additionalItems;\n      break;\n    case SchemaKind.Object:\n      (base as IObjectNode).properties = node.properties;\n      (base as IObjectNode).patternProperties = node.patternProperties;\n      (base as IObjectNode).additionalProperties = node.additionalProperties;\n      break;\n  }\n}\n\nfunction processNode(node: JSONSchema4): SchemaNode | void {\n  if (node.type !== undefined) {\n    const base: IBaseNode = {\n      id: assignId(node),\n      type: node.type,\n      validations: getValidations(node),\n      annotations: getAnnotations(node),\n      enum: node.enum,\n    };\n\n    if (Array.isArray(node.type)) {\n      if (node.type.includes('object')) {\n        // special case :P\n        assignNodeSpecificFields(base, {\n          ...node,\n          type: 'object',\n        });\n      }\n    } else {\n      assignNodeSpecificFields(base, node);\n    }\n\n    return base;\n  }\n\n  if ('enum' in node) {\n    return {\n      id: assignId(node),\n      validations: getValidations(node),\n      annotations: getAnnotations(node),\n      enum: node.enum,\n    };\n  }\n\n  if ('$ref' in node) {\n    return {\n      id: assignId(node),\n      $ref: node.$ref,\n    } as IRefNode;\n  }\n\n  const combiner = getCombiner(node);\n  if (combiner !== undefined) {\n    return {\n      id: assignId(node),\n      combiner,\n      properties: node[combiner],\n      annotations: getAnnotations(node),\n    } as ICombinerNode;\n  }\n\n  // if ('not' in node) {\n  //   // todo: shall we support it?\n  // }\n}\n\nexport function* walk(schema: JSONSchema4[] | JSONSchema4): IterableIterator<SchemaNode> {\n  if (Array.isArray(schema)) {\n    for (const segment of schema) {\n      yield* walk(segment);\n    }\n  } else {\n    const node = processNode(schema);\n    if (node !== undefined) {\n      yield node;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAQA;;;;;;;;;;;;;;;;AC9DA;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AAQA;AAKA;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;;;AChBA;AACA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAOA;AACA;AAPA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AAGA;AAGA;AACA;AAEA;AAGA;AAEA;AAEA;AAGA;AACA;AA5EA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;ACbA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAQA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAWA;AAMA;AACA;AACA;AAMA;AAMA;AAMA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAaA;AAOA;AAKA;AAEA;AAEA;AAEA;AAUA;;;;;;;;;;;;;;;;ACnIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAWA;AACA;AAcA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAWA;;;;;;;;;;;;;;;AC3FA;AAEA;AAEA;AAOA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;;;AChCA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAOA;AACA;AACA;;;;;;;;;;;;;;;ACxBA;AAEA;AACA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AASA;;;;;;;;;;;;;;;AChCA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;AAAA;AAGA;AAIA;AAAA;AAEA;AAOA;AACA;AAIA;AAKA;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AAKA;;;;;;;;;;;;;;;ACHA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/CA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACXA;;;;;;;;;;;;;;;ACCA;AAGA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;;;ACLA;AAGA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;;;ACJA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACDA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACRA;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAMA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}